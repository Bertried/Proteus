     1: /* Main.c file generated by New Project wizard
     2:  *
     3:  * Created:   mar. d�c. 6 2022
     4:  * Processor: PIC16F887
     5:  * Compiler:  HI-TECH C for PIC10/12/16
     6:  */
     7: 
     8: #include <htc.h>
     9: #include <pic.h>
    10: #include "lcd.h"
    11: 
    12: #define XTAL_FREQ 20000000
    13: 
    14: __CONFIG(FOSC_HS& WDTE_OFF& PWRTE_OFF& MCLRE_ON& CP_OFF& LVP_OFF);
    15: 
    16: unsigned char sec = 0, mins = 0, heure = 0, h = 0;
    17: typedef enum { LUN, MAR, MER, JEU, VEN, SAM, DIM }Jour; //Définition d'un type Jour pour faciliter la lecture/écriture du code
    18: Jour j = LUN;  // Début de la semaine (affichage à partir de lundi)
    19: const char* jours[7] = { "LUN","MAR","MER","JEU","VEN","SAM","DIM" };
    20: char Time[] = "00:00:00 AM"; //Début de l'affichage de l'heure
    21: 
    22: 
    23: bit antirebond(char c) { //Sous-programme antirebond pour éviter les rebonds lorsqu'un bouton est appuyé
    24:     char count = 0, i = 0;
    25:     for (; i < 5; i++) {
    26:         switch(c){// Déterminer quel bouton a été appuyé
    27:             case 'm':if (RB1 == 0)count++; 
    28:                 break;
    29:             case 'h':if (RB2 == 0)count++;
    30:                 break;
    31:             case 'j':if (RB3 == 0)count++;
    32:                 break;
    33:         }
    34:         delay_ms(10);
    35:     }
    36:     if (count > 2)  return 1;//Si le bouton est toujours appuyé
    37:     else  return 0; //Si le bouton est relaché 
    38: }
    39: 
    40: // ---- Sous-programme du réglage de l'heure -----//
    41: void lire_heure() { 
    42:     delay_ms(1000); // Temporisation 1000 ms (une seconde)
    43:     ++sec;          //Incrémenter sec par 1
    44:     mins += sec / 60; //Incrémenter mins par 1 si sec == 60
    45:     if (!RB1){      // Si le bouton minute est appuyé
    46:         while(antirebond('m'));//Attendre que le bouton minute soit relaché
    47:         mins++;     //Incrémenter mins par 1
    48:     }
    49:     h += mins / 60; //Incrémenter h par 1 si mins == 60
    50:     if (!RB2){      // Si le bouton heure est appuyé
    51:         while(antirebond('h'));//Attendre que le bouton heure soit relaché
    52:         h++;        //Incrémenter h par 1
    53:     }
    54:     j = (j + (h / 24)) % 7; //Incrémenter j par 1 si h == 24 et faire un cycle de 7jours
    55:     if (!RB3){      // Si le bouton jour est appuyé
    56:         while(antirebond('j'));//Attendre que le bouton jour soit relaché
    57:         j++;        //Incrémenter j par 1
    58:     }
    59:     h %= 24;    //Réinitialiser h lorsque h == 24
    60:     mins %= 60; //Réinitialiser mins lorsque mins == 60
    61:     sec %= 60;  //Réinitialiser sec lorsque sec == 60
    62:     heure = h;  //Mettre h dans la variable heure qui sera utilisée pour afficher l'heure au format AM/PM (jour/nuit)
    63:     heure = heure < 13 ? heure : ++heure % 13; //heure € [0,12] de minuit à midi et heure € [1,11] de 13hr à 23hr
    64:     Time[0] = heure / 10 + '0';   //Changer la dizaine de heure en char 
    65:     Time[1] = heure % 10 + '0';   //Changer l'unité de heure en char
    66:     Time[3] = mins / 10 + '0';    //Changer les dizaines de mins en char
    67:     Time[4] = mins % 10 + '0';    //Changer les unités de mins en char
    68:     Time[6] = sec / 10 + '0';     //Changer les dizaines de sec en char
    69:     Time[7] = sec % 10 + '0';     //Changer les unités de sec en char
    70:     Time[9] = h < 12 ? 'A' : 'P' ;//Basculement de mode lorsque h >= 12  (AM => PM)
    71: }
    72: 
    73: 
    74: //-------- Sous-programme de l'affichage ---------//
    75: void affichage() {
    76:     if (!RB0) {  // Enclancher l'affichage de l'heure 
    77:         // Condition pour que toutes les LEDs s'allument à midi et à minuit
    78:         if (((heure == mins) && (mins == sec) && (sec == 0)) || (heure == 12 && (mins == sec) && (sec == 0))){
    79:             PORTA = PORTC = 0x3F;   //Allumer toutes les LEDs
    80:             delay_ms(2000);         //Temporisaion 2 secs
    81:             sec += 2;               //Incrémenter secs par 2
    82:         }
    83:         lire_heure(); 
    84:         PORTA = heure < 6 || heure == 12 ? 1 << heure % 12 : 0; //
    85:         PORTC = heure < 6 ? 0 : 1 << (heure - 6);
    86:         lcd_set_cursor(1, 1);
    87:         lcd_write_string(jours[j]);             //Afficher le jour
    88:         lcd_set_cursor(1, 5);
    89:         lcd_write_string(Time);                 //Afficher l'heure
    90:         lcd_set_cursor(2, 1);
    91:         lcd_write_string("Lion ");              //Afficher le numéro du lion
    92:         lcd_write_character(heure / 10 + '0');
    93:         lcd_write_character(heure % 10 + '0');
    94:     }
    95:     else { // Stopper l'affichage de l'heure
    96:         PORTA = 0x00;
    97:         PORTC = 0x00;
    98:         lcd_clear();
    99:         delay_ms(5);
   100:         lcd_set_cursor(1,1);
   101:         lcd_write_string("           Cours des Lions");
   102:         for(int a = 0 ;a < 32;a++){
   103:         lcd_shift_left();
   104:         delay_ms(1000);}
   105:         lcd_clear();
   106:     }
   107: }
   108: 
   109: //++++++++ Programme Principale ++++++++//
   110: void main() {
   111:     ANSEL = 0;                      //Desactiver l'entrée analogique du PORTA
   112:     ANSELH = 0;                     //Desactiver l'entrée analogique du PORTB
   113:     TRISA = TRISC = TRISD = 0xC0;
   114:     nRBPU = 0;                      //Activater les résistances pull-up du PORTB
   115:     WPUB = 0x0F;                    //Connecter des entrées RB0-RB3 aux résistances pull-up
   116:     PORTA = PORTC = 0;
   117:     lcd_init();                     //Initialiser l'afficheur LCD
   118:     while (1) {
   119:         affichage();
   120:     }
   121: }